{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww18760\viewh15440\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs48 \cf0 DFMoco Protocol
\fs32 \

\b0\fs24 \
Version 1.3.0\
\
Messages are given from perspective of DFMoco device.\
Motor number starts at 1.\
All positions are in steps. Dragonframe computes step count from units.\
\

\b\fs36 Protocol
\fs24 \

\b0 Serial Port (Comm)\
Speed: 57600 Baud\
Data bits: 8\
Stop bits: 1\
Parity: 0\
\

\b\fs36 Message Format
\fs24 \

\b0 Messages are in ASCII text, with trailing \\r\\n\
\

\b\fs36 Messages
\fs24 \

\b0 \

\b Hello (hi) - initiate communication\

\b0 IN: hi\
OUT: hi <major version> <number of axes> <full version string>\
EXAMPLE: hi 1 8 1.2.7\
\

\b Motor Status (ms) - check moving status of all motors\

\b0 IN: ms\
OUT: ms <0 or 1 for each motor, 1 = moving>\
EXAMPLE: ms 10000000\
\

\b Move Motor (mm) - move a motor to a position\

\b0 IN: mm <motor> <step position>\
EXAMPLE: mm 1 250\
OUT: mm <motor> <target step position>\
OUT2: mp <motor> <step position>\
EXAMPLE: mm 1 250   (if motor needs to move)\
EXAMPLE: mp 1 250   (if motor was already there)\
\

\b Motor Position Query (mp) - request motor position\

\b0 IN: mp <motor>\
OUT: mp <motor> <step position>\
\

\b Stop Motor (sm) - stop a motor fairly quickly\

\b0 IN: sm <motor>\
EXAMPLE: sm 1\
OUT: sm <motor>\
EXAMPLE: sm 1\
\

\b Stop All (sa) - stop all motors fairly quickly\

\b0 IN: sa\
OUT: sa\
\

\b Jog Motor (jm) - move the motor at a reasonable speed (pulse rate) towards destination\

\b0 IN: jm <motor> <destination>\
OUT: jm <motor>\
\

\b Inch Motor (im) - move the in very small increments towards destination\

\b0 IN: im <motor> <destination>\
OUT: im <motor>\
\

\b Pulse Rate (pr) - set the maximum steps/second of motor\

\b0 IN: pr <motor> <steps/second>\
EXAMPLE: pr 1 20000\
OUT: pr <motor> <steps/second>\
\

\b Zero Motor (zm) - resets the motor's current position to zero (no movement)\

\b0 IN: zm <motor>\
OUT: zm <motor>\
\

\b New Position (np) - sets the motor's current position to a new value (no movement)\

\b0 IN: np <motor> <position>\
OUT: np <motor> <position>\
\

\b Go-Motion (Blur):\

\b0 This is complicated, and not required.\
The goal is to capture a single frame, with the camera moving over a certain area while the shutter is open.\

\b \

\b0 IN: bf <exposure time ms> <blur 0-1000> [ch#1 number] [ch#1 p0] [ch#1 p1] [ch#1 p2] [ch#2 number] [ch#2 p0] [ch#2 p1] [ch#2 p2] [etc]\
OUT: bf 1000\
Explanation:\
The exposure time is how long the camera will be exposing the image.\
The blur amount is in the range 0-1000, where 500 would correspond to a 50% or 180 degree blur setting (standard).\
Then, for each motor that should move you receive four parameters:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	1.	}A channel number.\
{\listtext	2.	}A previous frame position value.\
{\listtext	3.	}A current frame position value.\
{\listtext	4.	}A next frame position value.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Each motor's movement should be centered around p1, such that:\
The distance that is traveled is in relation to the blur percent (with 500 being 50%). 100% would mean the exposure happens for the entire distance of p0->p1->p2.\
For 50% (the more standard case), the exposure happens at half the distance between p1 and the previous and next positions.\
In mathematical terms, the exposure happens between these positions:\
[p1 - (p1 - p0) * blurPercent] -> [p1] -> [p1 + (p2 - p1) * blurPercent]\
\
And the exposure time should be evenly split between the two segments.\
So it should take 1/2 of the exposure time to travel [p1 - (p1 - p0) * blurPercent] -> [p1] ,\
and 1/2 of the exposure time to travel [p1] -> [p1 + (p2 - p1) * blurPercent]\
\
Furthermore, there should be a ramp up to speed before the exposure starts, and a slow down after it stops.\
The ramp up to speed should take exactly 1 second, even if the device does not need to move. This is so that Dragonframe knows when to trigger the camera.\
\
After the device calculates the go-motion move, it starts sending all motors into the initial position.\
Dragonframe will check for motor movement, and when everything has stopped, it will issue a "go" command:\
IN: go\
OUT: go\
\
At this point the rig should immediately start the go-motion move as described above.\
\

\b\fs36 Notes
\fs28 \

\b0\fs24 Any time a motor is moving, the device should send occasional "mp" messages.\
Dragonframe will keep requesting motor status (ms) until the movement is finished.\
}